"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.functionTest = void 0;
const common_1 = require("../../utils/common");
const fs_1 = require("fs");
const commons_1 = require("../../../common/utils/commons");
const test_function_1 = require("../../../test/test-function");
const model_1 = require("../../../common/model");
const functionTest = async (opts) => {
    if (!opts.src) {
        (0, common_1.error)("A function source path must be specified");
        return;
    }
    let initState = undefined;
    if (opts.initStateSrc) {
        initState = (0, fs_1.readFileSync)(opts.initStateSrc, 'utf8');
    }
    else {
        if (!opts.initState) {
            (0, common_1.error)("Initial state must be specified and it must be a JSON-valid expression");
            return;
        }
        initState = opts.initState;
    }
    if (!opts.input || opts.input.length <= 0) {
        (0, common_1.error)("Single or multiple inputs must be specified");
        return;
    }
    const bufferSource = (0, fs_1.readFileSync)(opts.src);
    const contractType = (0, commons_1.figureOutContractType)(opts.type || opts.src, opts.type !== undefined);
    const writeOperations = opts.input.map((input) => (0, test_function_1.createWrite)(input, [], undefined, true));
    const testFunction = await (0, test_function_1.TestFunction)({
        functionType: contractType == model_1.ContractType.WASM ? 1 : 0,
        functionInitState: JSON.parse(initState),
        functionSource: bufferSource,
        writes: writeOperations
    });
    console.log(JSON.stringify({
        state: testFunction.state,
        validity: testFunction.validity
    }, null, 2));
    return testFunction;
};
exports.functionTest = functionTest;
//# sourceMappingURL=function-test.js.map