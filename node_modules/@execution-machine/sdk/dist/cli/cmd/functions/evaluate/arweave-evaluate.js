"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.arweaveEvaluate = void 0;
const arweave_reader_1 = require("./readers/arweave/arweave-reader");
const common_1 = require("./common");
const fetch_bundle_1 = require("./fetch-bundle");
const app_simulator_1 = require("./app-simulator");
const arweaveEvaluate = async (opts) => {
    const arweaveReader = new arweave_reader_1.ArweaveReader();
    let fetchBundles = true;
    let cursor = undefined;
    let state = undefined;
    while (fetchBundles) {
        let paginator = { exmFunctionId: opts.exmFunctionId };
        if (cursor) {
            paginator.after = cursor;
        }
        const bundles = await arweaveReader.fetchBundles(paginator);
        if (bundles.length > 0) {
            const lastBundle = bundles[bundles.length - 1];
            cursor = lastBundle.after;
        }
        for (const bundleElement of bundles) {
            let bundleData = await (0, fetch_bundle_1.cacheBundle)(bundleElement.id, opts.cache);
            const run = await (0, app_simulator_1.runExmFunction)({
                version: bundleElement.threeEmExecutorVersion,
                contractId: opts.exmFunctionId,
                interactions: bundleData.entities.map((i) => i.raw),
                contractInitState: JSON.stringify(state?.state),
                maybeConfig: undefined,
                maybeCache: false,
                maybeBundledContract: bundleElement.isExmFunctionExmDeployed,
                maybeSettings: {
                    'LAZY_EVALUATION': true
                },
                maybeExmContext: (0, common_1.buildContext)(bundleData.exmContext)
            });
            state = run;
        }
        if (bundles.length <= 0) {
            fetchBundles = false;
        }
    }
    return state;
};
exports.arweaveEvaluate = arweaveEvaluate;
//# sourceMappingURL=arweave-evaluate.js.map