import { ExecuteConfig, SimulateContractType as ContractType, SimulateInput, Tag } from "three-em-0-3-22";
export declare const FunctionType: typeof ContractType;
export declare type FunctionType = ContractType;
export declare type WriteInput = SimulateInput;
export declare type ExecutionConfig = ExecuteConfig;
export interface TestFunctionOpts {
    functionSource: Uint8Array;
    functionType: ContractType;
    functionInitState: any;
    writes: WriteInput[];
    gatewayConfig?: ExecutionConfig;
    settings?: Record<string, any> | undefined | null;
    exmContext?: any | undefined | null;
}
export declare const createWrite: (input: any, tags?: Array<Tag>, opts?: Partial<Omit<SimulateInput, "tags" | "input">>, inputIsJson?: boolean) => SimulateInput;
export declare const TestFunction: (opts: TestFunctionOpts) => Promise<import("three-em-0-3-22").ExecuteContractResult>;
