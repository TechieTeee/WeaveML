"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeFunction = void 0;
const vars_1 = require("../vars");
const commons_1 = require("../utils/commons");
const writeOpFailure_1 = require("../exceptions/writeOpFailure");
const inputToString = (input) => {
    if (typeof input !== 'string') {
        input = JSON.stringify(input);
    }
    return input;
};
const cleanInput = (writeAction) => {
    if (!writeAction.input) {
        throw new Error(`Property 'input' is required in a write operation`);
    }
    if (!writeAction.tags) {
        writeAction.tags = [];
    }
    writeAction.input = inputToString(writeAction.input);
    return writeAction;
};
const writeFunction = async (functionId, writeOps, emToken, ignoreState, raw) => {
    let body = {
        functionId
    };
    let inputs = [];
    if (raw) {
        let writeOpsScope = writeOps;
        if (Array.isArray(writeOpsScope)) {
            writeOpsScope.forEach((i, index) => {
                writeOpsScope[index] = cleanInput(i);
            });
        }
        else {
            writeOpsScope = cleanInput(writeOpsScope);
        }
        inputs = Array.isArray(writeOpsScope) ? writeOpsScope : [writeOpsScope];
    }
    else {
        if (Array.isArray(writeOps)) {
            inputs = writeOps.map((i) => ({ input: inputToString(i), tags: [] }));
        }
        else {
            inputs = [{ input: inputToString(writeOps), tags: [] }];
        }
    }
    body.inputs = inputs;
    if (body.inputs.length > 499) {
        throw new writeOpFailure_1.WriteOpFailure("Only 499 writes are allowed in a single query.");
    }
    let reqUrl = `${vars_1.EmVars.EM_BACKEND_URL}/transactions?token=${emToken}`;
    if (ignoreState) {
        reqUrl = `${reqUrl}&ignoreState=true`;
    }
    const data = await (0, commons_1.postRequest)(reqUrl, body);
    let bodyJson = await data.json();
    if (data.ok) {
        return bodyJson;
    }
    else {
        if (bodyJson && bodyJson.statusCode && bodyJson.error && bodyJson.message) {
            throw new writeOpFailure_1.WriteOpFailure(`${bodyJson.statusCode}: Internal server error while sending write operation to function ${functionId}. "Error: ${bodyJson.message}"`, bodyJson.statusCode);
        }
        else {
            throw new writeOpFailure_1.WriteOpFailure(`${data.status}: Something went wrong, write operation for function ${functionId} could not be sent.`);
        }
    }
};
exports.writeFunction = writeFunction;
//# sourceMappingURL=write.js.map