/// <reference types="node" />
import { ArWallet, BundlrNodeType, ContractData, ContractDeploy, CreateContract, CustomSignature, DataItem, FromSrcTxContractData, BundlerSigner, SourceData, Transaction, Warp } from 'warp-contracts';
export declare class CreateContractImpl implements CreateContract {
    private readonly warp;
    private readonly logger;
    private readonly source;
    private signature;
    private readonly warpFetchWrapper;
    constructor(warp: Warp);
    deploy(contractData: ContractData, disableBundling?: boolean): Promise<ContractDeploy>;
    deployFromSourceTx(contractData: FromSrcTxContractData, disableBundling?: boolean, srcTx?: Transaction | DataItem): Promise<ContractDeploy>;
    deployBundled(rawDataItem: Buffer): Promise<ContractDeploy>;
    register(id: string, bundlrNode: BundlrNodeType): Promise<ContractDeploy>;
    createSource(sourceData: SourceData, wallet: ArWallet | CustomSignature | BundlerSigner, disableBundling?: boolean): Promise<Transaction | DataItem>;
    saveSource(srcTx: Transaction | DataItem, disableBundling?: boolean): Promise<string>;
    private postContract;
    private deployContractArweave;
    private deployContractBundlr;
    isBundlrNodeType(value: string): value is BundlrNodeType;
}
//# sourceMappingURL=CreateContractImpl.d.ts.map