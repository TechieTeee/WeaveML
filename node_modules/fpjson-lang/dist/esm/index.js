import*as e from"ramda";var _={Object,Array,String,Number,Boolean},c=t=>typeof t=="function",n=(t,s={})=>{if(e.isNil(t))return t;let u=e.curry(l=>(/^\$/.test(l)&&(l=a(e.tail(l),!0)),e.path(l.split("."))(s))),a=e.curry((l,o)=>u(l)),p=e.curry((l,o)=>{let R=s;/^\$/.test(l)&&(l=a(e.tail(l),!0));let y=l.split(".");for(let r of e.init(y))e.isNil(R[r])&&(R[r]={}),R=R[r];return R[e.last(y)]=o,o}),i=null;if(c(t[0])){let l=e.tail(t);i=t[0](...l)}else e.is(Array)(t)&&t.length===1&&t[0]==="__"?i=e.__:t[0]==="typ"?i=_[t[1]]:t[0]==="reg"?i=new RegExp(...e.tail(t)):e.is(Array)(t)&&(e.includes(t[0])(["let","var","$"])||c(e[t[0]]))?(i=e.compose(e.ifElse(e.o(e.gt(e.__,0),e.length),e.apply(t[0]==="$"?u:t[0]==="var"?a:t[0]==="let"?p:e[t[0]]),e.always(e[t[0]])),e.map(l=>n(l,s)),e.tail)(t),i=typeof i>"u"?[]:i):e.is(Object)(t)&&e.is(String)(t.var)?i=e.path(t.var.split("."))(s):e.is(Array)(t)||e.is(Object)(t)?i=e.map(l=>n(l,s))(t):i=t;let f=null;return e.is(Array)(i)&&e.is(String)(i[0])&&i[0]==="[]"?f=e.tail(i):f=c(i[0])?n(i,s):i,f},g=n;export{g as default};
//# sourceMappingURL=index.js.map
