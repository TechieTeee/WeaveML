type Direction = 'pub' | 'sub' | 'all';
export type StreamrConnectionOptions = {
    /**
     *  Choose if you want to publish, subscribe or both
     *  'pub' - write only
     *  'sub' - read only
     *  'all' - read and write
     */
    direction: Direction;
    /**
     * To create a stream please visit https://streamr.network/core/streams.
     */
    streamId?: string;
    /**
     Ignored if direction is sub.
     * @example: ws://my.host
     */
    writeHost?: string;
    /**
     * Ignored if direction is sub.
     * @default 7170
     */
    writePort?: number;
    /**
     * Ignored if direction is pub.
     * @example: ws://my.host
     */
    readHost?: string;
    /**
     * Ignored if direction is pub.
     * @default 7170
     */
    readPort?: number;
    /**
     * Api key required for 'pub' (and 'all') direction.
     * The key defined in the streamr broker configuration.
     */
    apiKey?: string;
};
export declare class StreamrWsClient {
    private readonly subConnection;
    private readonly pubConnection;
    private readonly subStatus;
    private readonly pubStatus;
    private readonly direction;
    private error;
    static create(connection: StreamrConnectionOptions): Promise<StreamrWsClient>;
    /**
     * Constructor can't be async. Use create method instead.
     * @param connection
     * @private
     */
    private constructor();
    private getStatusPromise;
    pub(data: any, onError?: (err?: Error) => void): Promise<void>;
    sub(onMessage: any, onError: any): void;
    close(): void;
    private checkConnectionStatus;
}
export {};
//# sourceMappingURL=streamrWsClient.d.ts.map